schema {
  query: Query
  mutation: Mutation
}

type Query {
  listUsers(limit: Int!, nextToken: String): UsersPage!
}

type Mutation {
  addUser(user: UserInput!): ID
  # updateUserProfile(proflie: UserProfileInput!): User!
}

interface IUser {
  username: String!
  status: UserStatus!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: String #TODO use AWSPhoneNumber
}

type User implements IUser {
  username: String!
  status: UserStatus!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: String
}

type UsersPage {
  users: [User!]
  nextToken: String
}

input UserInput {
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: String
}

enum UserRole {
  SUPER_USER
  ADMINISTRATOR
  SCHEDULER
  DIRECTOR
  CONTESTANT
  JUDGE
}

enum UserStatus {
  ENABLED
  DISABLED
}
